version: '3.8'

name: neuromesh

services:

  bot:
    depends_on:
      rabbitmq:
        condition: service_healthy
    build: 
      context: ./tgbot
      dockerfile: ./.ci/Dockerfile
    env_file:
      - .env
    networks:
      - internal
      - default

  api:
    &api
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: 
        condition: service_healthy
    build: 
      context: ./api
      dockerfile: ./.ci/Dockerfile
    env_file:
      - .env
    networks:
      - internal
      - default

  rabbitmq:
    image: rabbitmq:3.8.27-management-alpine
    env_file:
      - .env
    networks:
      - internal
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_running -q"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
  
  postgres:
    image: postgres:16-bookworm
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  taskiq-worker:
    <<: *api
    ports: []
    command: taskiq worker infrastructure.tasks.main:broker infrastructure.tasks.tasks
    depends_on:
      rabbitmq:
        condition: service_healthy
    
volumes:
  rabbitmq.data: {}
  postgres_data:

networks:
  internal:
    driver: bridge
    internal: true
  default:
    driver: bridge
