version: '3.8'

name: neuromesh

services:

  tgbot-service:
    container_name: tgbot-service
    hostname: tgbot
    depends_on:
      rabbitmq:
        condition: service_healthy
    build: 
      context: ./tgbot/
      dockerfile: ./Dockerfile
    volumes:
      - ./tgbot/src:/app
    env_file:
      - ./tgbot/.env
    networks:
      - internal

  api-service:
    &api-service
    container_name: api-service
    hostname: api
    depends_on:
      rabbitmq:
        condition: service_healthy
    build: 
      context: ./api/
      dockerfile: ./Dockerfile
    env_file:
      - ./api/.env.production
    networks:
      - internal
    ports:
      - 8000:8000
    volumes:
      - ./api/src:/app
    command: sh -c "alembic upgrade head && uvicorn presentation.main:create_app --host 0.0.0.0 --port 8000 --reload"

  postgres:
    container_name: postgres
    build: ./postgresql/
    hostname: postgres
    env_file:
      - ./api/.env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - internal
    ports:
      - 5432:5432
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  rabbitmq:
    container_name: rabbitmq-broker
    image: rabbitmq:3.8.27-management-alpine
    hostname: rabbitmq
    networks:
      - internal
    env_file:
      - .env
    expose:
      - 5672
      - 15672
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_running -q"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  text2image-worker:
    <<: *api-service
    ports: []
    container_name: text2image-worker
    command: taskiq worker infrastructure.tasks.main:broker infrastructure.tasks.tasks
    depends_on:
      rabbitmq:
        condition: service_healthy

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    hostname: grafana
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - internal
    volumes:
      - neuromesh.grafana.data:/var/lib/grafana:rw
      - ./config/grafana/provisioning:/etc/grafana/provisioning:rw
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=neuromesh.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    hostname: loki
    expose:
      - "3100"
    volumes:
      - neuromesh.loki.data:/tmp/:rw
    networks:
      - internal
    
  # scheduler:
  #   container_name: scheduler
  #   build: ./scheduler
  #   hostname: scheduler
  #   networks:
  #     - internal
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
    
volumes:
  neuromesh.loki.data: {}
  neuromesh.grafana.data: {}
  rabbitmq.data: {}
  postgres_data:

networks:
  internal:
    driver: bridge
