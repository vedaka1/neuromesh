version: '3.8'

name: neuromesh

services:

  tgbot-service:
    container_name: tgbot-service
    hostname: tgbot
    depends_on:
      rabbitmq:
        condition: service_healthy
    build: 
      context: ./tgbot/
      dockerfile: ./Dockerfile
    env_file:
      - ./tgbot/.env
    networks:
      - internal

  api-service:
    container_name: api-service
    hostname: api
    depends_on:
      rabbitmq:
        condition: service_healthy
    build: 
      context: ./api/
      dockerfile: ./Dockerfile
    env_file:
      - ./api/.env
    networks:
      - internal
    ports:
      - 8000:8000
    volumes:
      - ./api/src:/app
    command: uvicorn presentation.main:create_app --host 0.0.0.0 --port 8000 --reload

  postgres:
    container_name: postgres
    build: ./postgresql/
    hostname: postgres
    env_file:
      - ./api/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - internal
    ports:
      - 5432:5432
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  rabbitmq:
    container_name: rabbitmq-broker
    image: rabbitmq:3-management
    hostname: rabbitmq
    env_file:
      - .env
    networks:
      - internal
    expose:
      # AMQP protocol port
      - 5672
      # HTTP management UI
      - 15672
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - user_service.rabbitmq.data:/var/lib/rabbitmq/:rw
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_running -q"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
  
  # text2image-service:
  #   container_name: text2image-service
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   hostname: text2image
  #   build: 
  #     context: ./text2image/
  #     dockerfile: ./Dockerfile
  #   env_file:
  #     - .env
  #   networks:
  #     - internal
    
volumes:
  user_service.rabbitmq.data: {}
  postgres_data:

networks:
  internal:
    driver: bridge
